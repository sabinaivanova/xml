import pandas as pd
import numpy as np
import xml.etree.ElementTree as ET

xmlFile = "/home/sabina/git/task-images/icdo-de-transform/icdo3rev2_2019syst_claml_20210129.xml"
tree = ET.parse(xmlFile)
root = tree.getroot()
dataXml = []

for classЕlement in root.findall(".//Class"):
    codeElement = classЕlement.get("code")
    # if ":" in codeElement:
    code = codeElement.replace(":", "/")
    superClass = classЕlement.find("SuperClass")
    superCode = superClass.get("code") if superClass is not None else ""
   
    for rubricЕlement in classЕlement.findall("Rubric"):
        codeType = rubricЕlement.get("kind")
        isObsolete1 = rubricЕlement.get("usage")
        labelЕlement = rubricЕlement.find("Label")
        prefLabel = labelЕlement.text if codeType == "preferred" else None
        related = labelЕlement.text if codeType == "inclusion" else None

        synonyms = []
     
        exclusion = ""
        reference1 = ""
        seeAlso1 = ""
        reference2 = ""
        seeAlso2 = ""
        isObsolete2 = ""

        if labelЕlement is not None:
            for fragmentElement in labelЕlement.findall("Fragment"):
                if fragmentElement.text and fragmentElement.text.strip():
                    synonyms.append(fragmentElement.text.strip())
                    isObsolete2 = fragmentElement.get("usage") 

                for referenceElement1 in fragmentElement.findall("Reference"):
                    if referenceElement1.text.startswith("C"):
                        reference1 = referenceElement1.text.strip()
                    elif referenceElement1.text.startswith(tuple('0123456789')):
                        seeAlso1 = referenceElement1.text.strip()  

            for exclusionElement in labelЕlement.findall("Term"):
                if exclusionElement.text and exclusionElement.text.strip():
                    exclusion = exclusionElement.text.strip()

            for referenceElement2 in labelЕlement.findall("Reference"):
                if referenceElement2.text.startswith("C"):
                    reference2 = referenceElement2.text.strip()
                elif referenceElement2.text.startswith(tuple('0123456789')):
                    seeAlso2 = referenceElement2.text.strip()
        
        if prefLabel:
            dataXml.append({
                "code": code,
                "superCode": superCode,
                "codeType": codeType,
                "prefLabel": prefLabel,
                "related": None,
                "synonym": None,
                "exclusion": exclusion,
                "reference1": reference1,
                "seeAlso1": seeAlso1,
                "reference2": reference2,
                "seeAlso2": seeAlso2,
                "isObsolete1": isObsolete1,
                "isObsolete2": isObsolete2
            })

        if synonyms:
            for synonym in synonyms:
                dataXml.append({
                    "code": code,
                    "superCode": superCode,
                    "codeType": codeType,
                    "prefLabel": None,  
                    "related": None,
                    "synonym": synonym,
                    "exclusion": exclusion,
                    "reference1": reference1,
                    "seeAlso1": seeAlso1,
                    "reference2": reference2,
                    "seeAlso2": seeAlso2,
                    "isObsolete1": isObsolete1,
                    "isObsolete2": isObsolete2
                })

        if related:
            dataXml.append({
                "code": code,
                "superCode": superCode,
                "codeType": codeType,
                "prefLabel": None,
                "related": related,
                "synonym": None,
                "exclusion": exclusion,
                "reference1": reference1,
                "seeAlso1": seeAlso1,
                "reference2": reference2,
                "seeAlso2": seeAlso2,
                "isObsolete1": isObsolete1,
                "isObsolete2": isObsolete2
            })
        
filteredDataXml = [
    row for row in dataXml 
    if row['prefLabel'] or row['related'] or row['synonym']
]

df = pd.DataFrame(filteredDataXml)
df.to_csv("icdo.csv")
